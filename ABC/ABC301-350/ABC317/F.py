MOD = 998244353


def gcd(x, y):
    while y:
        x, y = y, x % y
    return x


def lcm(x, y):
    return x * y // gcd(x, y)


def solve(n, a1, a2, a3):
    n_str_rev = list(reversed(list(str(bin(n))[2:])))
    m = len(n_str_rev)
    dp = [
        [[[
            [[[0] * a3 for _2 in range(a2)] for _1 in range(a1)]
            for __3 in range(2)] for __2 in range(2)] for __1 in range(2)]
        for _ in range(m + 1)]
    dp[0][0][0][0][0][0][0] = 1
    for i in range(m):
        for j1 in range(a1):
            for j2 in range(a2):
                for j3 in range(a3):
                    j1_ = j1
                    j2_ = j2
                    j3_ = j3
                    if n_str_rev[i] == "0":
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][0][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][0][0][1][j1_][j2_][j3_] += dp[i][0][0][1][j1][j2][j3]
                        dp[i + 1][0][0][1][j1_][j2_][j3_] %= MOD
                        dp[i + 1][0][1][0][j1_][j2_][j3_] += dp[i][0][1][0][j1][j2][j3]
                        dp[i + 1][0][1][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][0][1][1][j1_][j2_][j3_] += dp[i][0][1][1][j1][j2][j3]
                        dp[i + 1][0][1][1][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][0][0][j1_][j2_][j3_] += dp[i][1][0][0][j1][j2][j3]
                        dp[i + 1][1][0][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][0][1][j1_][j2_][j3_] += dp[i][1][0][1][j1][j2][j3]
                        dp[i + 1][1][0][1][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][1][0][j1_][j2_][j3_] += dp[i][1][1][0][j1][j2][j3]
                        dp[i + 1][1][1][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][1][1][1][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] %= MOD
                    else:
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][0][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][0][1][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][1][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][1][1][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][1][0][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][1][0][1][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][1][1][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][1][1][1][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] %= MOD
                    j1_ = (j1 + (2 ** i)) % a1
                    j2_ = j2
                    j3_ = (j3 + (2 ** i)) % a3
                    if n_str_rev[i] == "0":
                        dp[i + 1][1][0][1][j1_][j2_][j3_] += dp[i][0][0][0][j1][j2][j3]
                        dp[i + 1][1][0][1][j1_][j2_][j3_] += dp[i][0][0][1][j1][j2][j3]
                        dp[i + 1][1][0][1][j1_][j2_][j3_] += dp[i][1][0][0][j1][j2][j3]
                        dp[i + 1][1][0][1][j1_][j2_][j3_] += dp[i][1][0][1][j1][j2][j3]
                        dp[i + 1][1][0][1][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][0][1][0][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][0][1][1][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][1][1][0][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][1][1][1][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] %= MOD
                    else:
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][0][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][1][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][0][0][1][j1_][j2_][j3_] += dp[i][0][0][1][j1][j2][j3]
                        dp[i + 1][0][0][1][j1_][j2_][j3_] += dp[i][0][1][1][j1][j2][j3]
                        dp[i + 1][0][0][1][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][0][0][j1_][j2_][j3_] += dp[i][1][0][0][j1][j2][j3]
                        dp[i + 1][1][0][0][j1_][j2_][j3_] += dp[i][1][1][0][j1][j2][j3]
                        dp[i + 1][1][0][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][0][1][j1_][j2_][j3_] += dp[i][1][0][1][j1][j2][j3]
                        dp[i + 1][1][0][1][j1_][j2_][j3_] += dp[i][1][1][1][j1][j2][j3]
                        dp[i + 1][1][0][1][j1_][j2_][j3_] %= MOD
                    j1_ = j1
                    j2_ = (j2 + (2 ** i)) % a2
                    j3_ = (j3 + (2 ** i)) % a3
                    if n_str_rev[i] == "0":
                        dp[i + 1][0][1][1][j1_][j2_][j3_] += dp[i][0][0][0][j1][j2][j3]
                        dp[i + 1][0][1][1][j1_][j2_][j3_] += dp[i][0][0][1][j1][j2][j3]
                        dp[i + 1][0][1][1][j1_][j2_][j3_] += dp[i][0][1][0][j1][j2][j3]
                        dp[i + 1][0][1][1][j1_][j2_][j3_] += dp[i][0][1][1][j1][j2][j3]
                        dp[i + 1][0][1][1][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][1][0][0][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][1][0][1][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][1][1][0][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][1][1][1][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] %= MOD
                    else:
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][0][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][1][0][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][0][0][1][j1_][j2_][j3_] += dp[i][0][0][1][j1][j2][j3]
                        dp[i + 1][0][0][1][j1_][j2_][j3_] += dp[i][1][0][1][j1][j2][j3]
                        dp[i + 1][0][0][1][j1_][j2_][j3_] %= MOD
                        dp[i + 1][0][1][0][j1_][j2_][j3_] += dp[i][0][1][0][j1][j2][j3]
                        dp[i + 1][0][1][0][j1_][j2_][j3_] += dp[i][1][1][0][j1][j2][j3]
                        dp[i + 1][0][1][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][0][1][1][j1_][j2_][j3_] += dp[i][0][1][1][j1][j2][j3]
                        dp[i + 1][0][1][1][j1_][j2_][j3_] += dp[i][1][1][1][j1][j2][j3]
                        dp[i + 1][0][1][1][j1_][j2_][j3_] %= MOD
                    j1_ = (j1 + (2 ** i)) % a1
                    j2_ = (j2 + (2 ** i)) % a2
                    j3_ = j3
                    if n_str_rev[i] == "0":
                        dp[i + 1][1][1][0][j1_][j2_][j3_] += dp[i][0][0][0][j1][j2][j3]
                        dp[i + 1][1][1][0][j1_][j2_][j3_] += dp[i][0][1][0][j1][j2][j3]
                        dp[i + 1][1][1][0][j1_][j2_][j3_] += dp[i][1][0][0][j1][j2][j3]
                        dp[i + 1][1][1][0][j1_][j2_][j3_] += dp[i][1][1][0][j1][j2][j3]
                        dp[i + 1][1][1][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][0][0][1][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][0][1][1][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][1][0][1][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] += dp[i][1][1][1][j1][j2][j3]
                        dp[i + 1][1][1][1][j1_][j2_][j3_] %= MOD
                    else:
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][0][0][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] += dp[i][0][0][1][j1][j2][j3]
                        dp[i + 1][0][0][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][0][1][0][j1_][j2_][j3_] += dp[i][0][1][0][j1][j2][j3]
                        dp[i + 1][0][1][0][j1_][j2_][j3_] += dp[i][0][1][1][j1][j2][j3]
                        dp[i + 1][0][1][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][0][0][j1_][j2_][j3_] += dp[i][1][0][0][j1][j2][j3]
                        dp[i + 1][1][0][0][j1_][j2_][j3_] += dp[i][1][0][1][j1][j2][j3]
                        dp[i + 1][1][0][0][j1_][j2_][j3_] %= MOD
                        dp[i + 1][1][1][0][j1_][j2_][j3_] += dp[i][1][1][0][j1][j2][j3]
                        dp[i + 1][1][1][0][j1_][j2_][j3_] += dp[i][1][1][1][j1][j2][j3]
                        dp[i + 1][1][1][0][j1_][j2_][j3_] %= MOD

    res_0 = dp[-1][0][0][0][0][0][0]
    g12 = n // lcm(a1, a2)
    g23 = n // lcm(a2, a3)
    g31 = n // lcm(a3, a1)
    # print(res_0, g12, g23, g31)
    res = res_0 - g12 - g23 - g31 - 1
    res %= MOD
    return res


def solve_greed(n, a1, a2, a3):
    res = 0
    for i in range(a1, n + 1, a1):
        for j in range(a2, n + 1, a2):
            if (i ^ j) % a3 == 0 and i != j and (i ^ j) <= n:
                res += 1
                print(i, j, i ^ j)
    return res


def main():
    n, a1, a2, a3 = map(int, input().split())
    res = solve(n, a1, a2, a3)
    print(res)


def test():
    assert solve(15, 2, 3, 5) == 7
    assert solve(13, 2, 3, 5) == 4
    assert solve(1000000000000000000, 1, 1, 1) == 426724011
    assert solve(31415926535897932, 3, 8, 4) == 759934997


def test_greed():
    print(solve_greed(15, 2, 3, 5))
    # print(solve_greed(26, 2, 3, 5))


if __name__ == "__main__":
    # test_greed()
    test()
    main()
